{"version":3,"sources":["../src/modal_passgrade.js"],"names":["define","$","Notification","CustomEvents","Modal","ModalRegistry","registered","SELECTORS","LOGIN_BUTTON","CANCEL_BUTTON","ModalPassgrade","root","call","getFooter","find","length","exception","message","TYPE","prototype","Object","create","constructor","savepressedcallback","window","console","log","registerEventListeners","getModal","on","events","activate","bind","hide","register"],"mappings":"AAAAA,OAAM,uCAAC,CAAC,QAAD,CAAW,mBAAX,CAAgC,gCAAhC,CAAkE,YAAlE,CAAgF,qBAAhF,CAAD,CACF,SAASC,CAAT,CAAYC,CAAZ,CAA0BC,CAA1B,CAAwCC,CAAxC,CAA+CC,CAA/C,CAA8D,IACtDC,CAAAA,CAAU,GAD4C,CAEtDC,CAAS,CAAG,CACZC,YAAY,CAAE,yBADF,CAEZC,aAAa,CAAE,0BAFH,CAF0C,CAYtDC,CAAc,CAAG,SAASC,CAAT,CAAe,CAChCP,CAAK,CAACQ,IAAN,CAAW,IAAX,CAAiBD,CAAjB,EAEA,GAAI,CAAC,KAAKE,SAAL,GAAiBC,IAAjB,CAAsBP,CAAS,CAACC,YAAhC,EAA8CO,MAAnD,CAA2D,CACvDb,CAAY,CAACc,SAAb,CAAuB,CAACC,OAAO,CAAE,uBAAV,CAAvB,CACH,CAED,GAAI,CAAC,KAAKJ,SAAL,GAAiBC,IAAjB,CAAsBP,CAAS,CAACE,aAAhC,EAA+CM,MAApD,CAA4D,CACxDb,CAAY,CAACc,SAAb,CAAuB,CAACC,OAAO,CAAE,wBAAV,CAAvB,CACH,CACJ,CAtByD,CAwB1DP,CAAc,CAACQ,IAAf,CAAsB,+BAAtB,CACAR,CAAc,CAACS,SAAf,CAA2BC,MAAM,CAACC,MAAP,CAAcjB,CAAK,CAACe,SAApB,CAA3B,CACAT,CAAc,CAACS,SAAf,CAAyBG,WAAzB,CAAuCZ,CAAvC,CACAA,CAAc,CAACS,SAAf,CAAyBI,mBAAzB,CAA+C,UAAc,CACzDC,MAAM,CAACC,OAAP,CAAeC,GAAf,CAAmB,2CAAnB,CACH,CAFD,CASAhB,CAAc,CAACS,SAAf,CAAyBQ,sBAAzB,CAAkD,UAAW,CAEzDvB,CAAK,CAACe,SAAN,CAAgBQ,sBAAhB,CAAuCf,IAAvC,CAA4C,IAA5C,EAEA,KAAKgB,QAAL,GAAgBC,EAAhB,CAAmB1B,CAAY,CAAC2B,MAAb,CAAoBC,QAAvC,CAAiDxB,CAAS,CAACC,YAA3D,CAAyE,UAAkB,CACvF,KAAKe,mBAAL,EAGH,CAJwE,CAIvES,IAJuE,CAIlE,IAJkE,CAAzE,EAMA,KAAKJ,QAAL,GAAgBC,EAAhB,CAAmB1B,CAAY,CAAC2B,MAAb,CAAoBC,QAAvC,CAAiDxB,CAAS,CAACE,aAA3D,CAA0E,UAAkB,CAExF,KAAKwB,IAAL,EACH,CAHyE,CAGxED,IAHwE,CAGnE,IAHmE,CAA1E,CAIH,CAdD,CAkBA,GAAI,CAAC1B,CAAL,CAAiB,CACbD,CAAa,CAAC6B,QAAd,CAAuBxB,CAAc,CAACQ,IAAtC,CAA4CR,CAA5C,CAA4D,qCAA5D,EACAJ,CAAU,GACb,CAED,MAAOI,CAAAA,CACV,CA7DC,CAAN","sourcesContent":["define(['jquery', 'core/notification', 'core/custom_interaction_events', 'core/modal', 'core/modal_registry'],\n    function($, Notification, CustomEvents, Modal, ModalRegistry) {\n        var registered = false;\n        var SELECTORS = {\n            LOGIN_BUTTON: '[data-action=\"login\"]',\n            CANCEL_BUTTON: '[data-action=\"cancel\"]',\n        };\n\n        /**\n         * Constructor for the Modal.\n         *\n         * @param {object} root The root jQuery element for the modal\n         */\n        var ModalPassgrade = function(root) {\n            Modal.call(this, root);\n\n            if (!this.getFooter().find(SELECTORS.LOGIN_BUTTON).length) {\n                Notification.exception({message: 'No login button found'});\n            }\n\n            if (!this.getFooter().find(SELECTORS.CANCEL_BUTTON).length) {\n                Notification.exception({message: 'No cancel button found'});\n            }\n        };\n\n        ModalPassgrade.TYPE = 'scormreport_heatmap-passgrade';\n        ModalPassgrade.prototype = Object.create(Modal.prototype);\n        ModalPassgrade.prototype.constructor = ModalPassgrade;\n        ModalPassgrade.prototype.savepressedcallback = (formdata) => { // eslint-disable-line\n            window.console.log(\"Save pressed but callback not overwritten\");\n        };\n\n        /**\n         * Set up all of the event handling for the modal.\n         *\n         * @method registerEventListeners\n         */\n        ModalPassgrade.prototype.registerEventListeners = function() {\n            // Apply parent event listeners.\n            Modal.prototype.registerEventListeners.call(this);\n\n            this.getModal().on(CustomEvents.events.activate, SELECTORS.LOGIN_BUTTON, function(e, data) {\n                this.savepressedcallback();\n                // Add your logic for when the login button is clicked. This could include the form validation,\n                // loading animations, error handling etc.\n            }.bind(this));\n\n            this.getModal().on(CustomEvents.events.activate, SELECTORS.CANCEL_BUTTON, function(e, data) {\n                // Add your logic for when the cancel button is clicked.\n                this.hide();\n            }.bind(this));\n        };\n\n        // Automatically register with the modal registry the first time this module is imported so that you can create modals\n        // of this type using the modal factory.\n        if (!registered) {\n            ModalRegistry.register(ModalPassgrade.TYPE, ModalPassgrade, 'scormreport_heatmap/modal_passgrade');\n            registered = true;\n        }\n\n        return ModalPassgrade;\n    }\n);"],"file":"modal_passgrade.min.js"}