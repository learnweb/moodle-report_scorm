{"version":3,"sources":["../src/report_view.js"],"names":["group_by_scene","vals","groups","forEach","questiondata","id","key","split","data","push","e","best","worst","sum","answersum","question","percentage","correct","total","average","length","statistics","answers","add_single_question_plotly","appendidentifier","questiontext","description","trim","singletrace","y0","x","percentages","span","spanmode","meanline","points","pointpos","box","jitter","scalemode","type","orientation","layout","yaxis","zeroline","violinmode","context","title","Templates","renderForPromise","then","html","js","appendNodeContents","window","Plotly","newPlot","catch","ex","add_single_question_boolean","displaypercentage","Math","max","min","round","add_question","idprefix","displaytype","previous","single_yesno_val","draw_passingquota_for_threshold","threshold","userscores","passing","score","percentagecircle","$","removeClass","index","classname","match","addClass","circletext","text","init_projected_passings","click","ModalFactory","create","Passmodal","TYPE","modal","savepressedcallback","passtreshold","parseFloat","val","isNaN","hide","show","init","sections","section","sectiondata","toFixed","oneinallchart","traces","trace","visible","scalemmode","showlegend","name","checkExist","setInterval","clearInterval","remove"],"mappings":"sQACA,OACA,OACA,O,4lCAGMA,CAAAA,CAAc,CAAG,SAACC,CAAD,CAAU,CAC7B,GAAIC,CAAAA,CAAM,CAAG,EAAb,CAEAD,CAAI,CAACE,OAAL,CAAa,SAACC,CAAD,CAAkB,CAC3B,GAAIC,CAAAA,CAAE,CAAGD,CAAY,CAACC,EAAtB,CACA,GAAI,CACA,GAAIC,CAAAA,CAAG,CAAGD,CAAE,CAACE,KAAH,CAAS,GAAT,EAAc,CAAd,CAAV,CACA,GAAI,EAAED,CAAG,GAAIJ,CAAAA,CAAT,CAAJ,CAAsB,CAClBA,CAAM,CAACI,CAAD,CAAN,CAAc,CAAC,KAAQ,EAAT,CAAa,GAAMA,CAAnB,CACjB,CACDJ,CAAM,CAACI,CAAD,CAAN,CAAYE,IAAZ,CAAiBC,IAAjB,CAAsBL,CAAtB,CACH,CAAC,MAAOM,CAAP,CAAU,CAER,GAAI,EAAE,WAAOR,CAAAA,CAAT,CAAJ,CAAsB,CAClBA,CAAM,WAAN,CAAc,CAAC,KAAQ,EAAT,CACjB,CACDA,CAAM,WAAN,CAAYM,IAAZ,CAAiBC,IAAjB,CAAsBL,CAAtB,CACH,CACJ,CAfD,EAkBA,IAAK,GAAIE,CAAAA,CAAT,GAAgBJ,CAAAA,CAAhB,CAAwB,IAChBS,CAAAA,CAAI,CAAG,CADS,CAEhBC,CAAK,CAAG,CAFQ,CAGhBC,CAAG,CAAG,CAHU,CAIhBC,CAAS,CAAG,CAJI,KAKCZ,CAAM,CAACI,CAAD,CAAN,CAAYE,IALb,QAKpB,2BAAuC,IAA9BO,CAAAA,CAA8B,SAC/BC,CAAU,CAAGD,CAAQ,CAACE,OAAT,CAAmBF,CAAQ,CAACG,KADV,CAEnC,GAAIF,CAAU,CAAGL,CAAjB,CAAuB,CACnBA,CAAI,CAAGK,CACV,CACD,GAAIA,CAAU,CAAGJ,CAAjB,CAAwB,CACpBA,CAAK,CAAGI,CACX,CACDF,CAAS,EAAIC,CAAQ,CAACG,KAAtB,CACAL,CAAG,EAAIG,CACV,CAfmB,+BAgBpB,GAAIG,CAAAA,CAAO,CAAGN,CAAG,CAAGX,CAAM,CAACI,CAAD,CAAN,CAAYE,IAAZ,CAAiBY,MAArC,CACAlB,CAAM,CAACI,CAAD,CAAN,CAAYe,UAAZ,CAAyB,CACrBC,OAAO,CAAER,CADY,CAErBK,OAAO,CAAEA,CAFY,CAI5B,CAED,MAAOjB,CAAAA,CACV,C,CAEKqB,CAA0B,CAAG,SAACnB,CAAD,CAAeoB,CAAf,CAAoC,CACnE,GAAIC,CAAAA,CAAY,CAAG,EAAnB,CACA,GAAI,eAAiBrB,CAAAA,CAArB,CAAmC,CAC/BqB,CAAY,CAAuC,EAApC,GAAArB,CAAY,CAACsB,WAAb,CAAyBC,IAAzB,GAAyCvB,CAAY,CAACC,EAAtD,CAA2DD,CAAY,CAACsB,WAC1F,CAFD,IAEO,CACHD,CAAY,CAAGrB,CAAY,CAACC,EAC/B,CANkE,GAO/DuB,CAAAA,CAAW,CAAG,CACdC,EAAE,CAAE,KADU,CAEdC,CAAC,CAAE1B,CAAY,CAAC2B,WAFF,CAIdC,IAAI,CAAE,CAAC,CAAD,CAAI,CAAJ,CAJQ,CAKdC,QAAQ,CAAE,QALI,CAMdC,QAAQ,CAAE,CACN,UADM,CANI,CASdC,MAAM,CAAE,KATM,CAUdC,QAAQ,CAAE,CAVI,CAWdC,GAAG,CAAE,CACD,UADC,CAXS,CAcdC,MAAM,CAAE,CAdM,CAedC,SAAS,CAAE,OAfG,CAgBdC,IAAI,CAAE,QAhBQ,CAiBdC,WAAW,CAAE,GAjBC,CAPiD,CA0B/DC,CAAM,CAAG,CACTC,KAAK,CAAE,CACHC,QAAQ,GADL,CADE,CAITC,UAAU,CAAE,SAJH,CA1BsD,CAgC/DC,CAAO,CAAG,CAAC,GAAM1C,CAAY,CAACC,EAApB,CAAwB0C,KAAK,CAAEtB,CAA/B,CAA6CH,OAAO,CAAElB,CAAY,CAACc,KAAnE,CAhCqD,CAiCnE8B,UAAUC,gBAAV,CAA2B,mCAA3B,CAAgEH,CAAhE,EAAyEI,IAAzE,CAA8E,WAAgB,IAAdC,CAAAA,CAAc,GAAdA,IAAc,CAARC,CAAQ,GAARA,EAAQ,CAC1FJ,UAAUK,kBAAV,CAA6B7B,CAA7B,CAA+C2B,CAA/C,CAAqDC,CAArD,EACAE,MAAM,CAACC,MAAP,CAAcC,OAAd,CAAsB,+BAAiCpD,CAAY,CAACC,EAApE,CAAwE,CAACuB,CAAD,CAAxE,CAAuFc,CAAvF,EACA,QACH,CAJD,EAIGe,KAJH,CAIS,SAAAC,CAAE,QAAI,gBAAiBA,CAAjB,CAAJ,CAJX,CAKH,C,CAEKC,CAA2B,CAAG,SAACvD,CAAD,CAAeoB,CAAf,CAAoC,CACpE,GAAIC,CAAAA,CAAY,CAAG,EAAnB,CACA,GAAI,eAAiBrB,CAAAA,CAArB,CAAmC,CAC/BqB,CAAY,CAAuC,EAApC,GAAArB,CAAY,CAACsB,WAAb,CAAyBC,IAAzB,GAAyCvB,CAAY,CAACC,EAAtD,CAA2DD,CAAY,CAACsB,WAC1F,CAFD,IAEO,CACHD,CAAY,CAAGrB,CAAY,CAACC,EAC/B,CANmE,GAQhEY,CAAAA,CAAO,CAAGb,CAAY,CAACa,OARyC,CAShEC,CAAK,CAAGd,CAAY,CAACc,KAT2C,CAWhE0C,CAAiB,CAAGC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAAS,GAAT,CAAcF,IAAI,CAACG,KAAL,CADpB,GAAV,CAAA/C,CAAO,CAASC,CACc,CAAd,CAAT,CAAgD,CAAhD,CAX4C,CAYhE4B,CAAO,CAAG,CACV,GAAM1C,CAAY,CAACC,EADT,CAEV,MAASoB,CAFC,CAGV,QAAWrB,CAAY,CAACc,KAHd,CAIV,WAAc0C,CAJJ,CAKV,QAAW3C,CALD,CAMV,MAASC,CANC,CAZsD,CAoBpE8B,UAAUC,gBAAV,CAA2B,mCAA3B,CAAgEH,CAAhE,EAAyEI,IAAzE,CACI,WAAgB,IAAdC,CAAAA,CAAc,GAAdA,IAAc,CAARC,CAAQ,GAARA,EAAQ,CACZJ,UAAUK,kBAAV,CAA6B7B,CAA7B,CAA+C2B,CAA/C,CAAqDC,CAArD,EACA,QACP,CAJD,EAIGK,KAJH,CAIS,SAAAC,CAAE,QAAI,gBAAiBA,CAAjB,CAAJ,CAJX,CAKH,C,CAEKO,CAAY,CAAG,SAAC7D,CAAD,CAAe8D,CAAf,CAA4B,CAC7C,GAAiC,UAA7B,GAAA9D,CAAY,CAAC+D,WAAb,EAA6E,CAAlC,CAAA/D,CAAY,CAAC2B,WAAb,CAAyBX,MAAxE,CAAoF,IAC5EgD,CAAAA,CAAQ,CAAGhE,CAAY,CAAC2B,WAAb,CAAyB,CAAzB,CADiE,CAE5EsC,CAAgB,CAAgB,CAAb,GAAAD,CAAQ,EAAuB,CAAb,GAAAA,CAFuC,CAGhF,GAAIC,CAAJ,CAAsB,SACKjE,CAAY,CAAC2B,WADlB,QAClB,2BAAiD,IAAxCf,CAAAA,CAAwC,SAC7C,GAAIoD,CAAQ,GAAKpD,CAAjB,CAA6B,CACzBqD,CAAgB,GAAhB,CACA,KACH,CACJ,CANiB,+BAOrB,CACJ,CACD,GAAiC,UAA7B,GAAAjE,CAAY,CAAC+D,WAAb,EAA2C,CAACE,CAAhD,CAAkE,CAC9D9C,CAA0B,CAACnB,CAAD,YAAmB8D,CAAnB,mBAC7B,CAFD,IAEO,CACHP,CAA2B,CAACvD,CAAD,YAAmB8D,CAAnB,mBAC9B,CACJ,C,CAEKI,CAA+B,CAAG,SAACC,CAAD,CAAYC,CAAZ,CAA2B,IAC3DC,CAAAA,CAAO,CAAG,CADiD,KAE7CD,CAF6C,QAE/D,2BAA8B,IAArBE,CAAAA,CAAqB,SAC1B,GAAIA,CAAK,EAAIH,CAAb,CAAwB,CACpBE,CAAO,EACV,CACJ,CAN8D,+BAO/D,GAAIzD,CAAAA,CAAU,CAAa,GAAV,CAAAyD,CAAO,CAASD,CAAU,CAACpD,MAA5C,CACAJ,CAAU,CAAG6C,IAAI,CAACC,GAAL,CAAS,CAAT,CAAYD,IAAI,CAACE,GAAL,CAASF,IAAI,CAACG,KAAL,CAAWhD,CAAX,CAAT,CAAiC,GAAjC,CAAZ,CAAb,CACA,GAAI2D,CAAAA,CAAgB,CAAGC,CAAC,CAAC,+CAAD,CAAxB,CACAD,CAAgB,CAACE,WAAjB,CAA6B,SAACC,CAAD,CAAQC,CAAR,CAAsB,CAC/C,MAAQA,CAAAA,CAAS,CAACC,KAAV,CAAgB,aAAhB,CACX,CAFD,EAGAL,CAAgB,CAACM,QAAjB,YAA8BjE,CAA9B,GACA,GAAIkE,CAAAA,CAAU,CAAGN,CAAC,CAAC,8EAAD,CAAlB,CAEAM,CAAU,CAACC,IAAX,WAAmBnE,CAAnB,MAEH,C,CAEKoE,CAAuB,CAAG,SAACZ,CAAD,CAAgB,CAC5CI,CAAC,CAAC,+BAAD,CAAD,CAAmCS,KAAnC,CAAyC,UAAM,CAC3CC,UAAaC,MAAb,CAAoB,CAChB,KAAQC,UAAUC,IADF,CAApB,EAEGvC,IAFH,CAEQ,SAACwC,CAAD,CAAW,CACfA,CAAK,CAACC,mBAAN,CAA4B,UAAM,CAC9B,GAAIC,CAAAA,CAAY,CAAGC,UAAU,CAACjB,CAAC,CAAC,kBAAD,CAAD,CAAsBkB,GAAtB,EAAD,CAA7B,CACA,GAAIC,KAAK,CAACH,CAAD,CAAT,CAAyB,CACrB,MACH,CACDtB,CAA+B,CAACsB,CAAD,CAAepB,CAAf,CAA/B,CACAkB,CAAK,CAACM,IAAN,EACH,CAPD,CAQAN,CAAK,CAACO,IAAN,GACA,QACH,CAbD,EAaGxC,KAbH,CAaS,SAAAC,CAAE,QAAI,gBAAiBA,CAAjB,CAAJ,CAbX,CAcH,CAfD,EAgBAY,CAA+B,CAAC,EAAD,CAAKE,CAAL,CAClC,C,QAEmB,QAAP0B,CAAAA,IAAO,CAACjG,CAAD,CAAOuE,CAAP,CAAsB,CACtCY,CAAuB,CAACZ,CAAD,CAAvB,CADsC,GAElC2B,CAAAA,CAAQ,CAAGnG,CAAc,CAACC,CAAD,CAFS,YAG7BmG,CAH6B,KAI9BC,CAAAA,CAAW,CAAGF,CAAQ,CAACC,CAAD,CAJQ,CAK9BlC,CAAQ,+BAA0BkC,CAA1B,CALsB,CAM9BtD,CAAO,CAAG,CACV,UAAaoB,CADH,CAEV,MAASkC,CAFC,CAGV,QAAWC,CAAW,CAAChF,UAAZ,CAAuBC,OAHxB,CAIV,QAAW,CAAkC,GAAjC,CAAA+E,CAAW,CAAChF,UAAZ,CAAuBF,OAAxB,EAAuCmF,OAAvC,CAA+C,CAA/C,CAJD,CANoB,CAYlCtD,UAAUC,gBAAV,CAA2B,uCAA3B,CAAoEH,CAApE,EACKI,IADL,CACU,WAAgB,IAAdC,CAAAA,CAAc,GAAdA,IAAc,CAARC,CAAQ,GAARA,EAAQ,CAClBJ,UAAUK,kBAAV,CAA6B,gCAA7B,CAA+DF,CAA/D,CAAqEC,CAArE,EADkB,QAEOiD,CAAW,CAAC7F,IAFnB,QAElB,2BAA2C,IAAlCJ,CAAAA,CAAkC,SACvC6D,CAAY,CAAC7D,CAAD,CAAe8D,CAAf,CACf,CAJiB,+BAKlB,QACH,CAPL,EAQKT,KARL,CAQW,SAAAC,CAAE,QAAI,gBAAiBA,CAAjB,CAAJ,CARb,CAZkC,EAGtC,IAAK,GAAI0C,CAAAA,CAAT,GAAoBD,CAAAA,CAApB,CAA8B,GAArBC,CAAqB,CAmB7B,CACJ,C,iBAE4B,QAAhBG,CAAAA,aAAgB,CAACtG,CAAD,CAAU,CACnC,GAAIuG,CAAAA,CAAM,CAAG,EAAb,CACAvG,CAAI,CAACE,OAAL,CAAa,SAAU2F,CAAV,CAAe,CACxB,GAAIW,CAAAA,CAAK,CAAG,CACRtB,IAAI,CAAEW,CAAG,CAACzF,EADF,CAER2B,IAAI,CAAE,CAAC,CAAD,CAAI,CAAJ,CAFE,CAGRC,QAAQ,CAAE,QAHF,CAIRC,QAAQ,CAAE,CACNwE,OAAO,GADD,CAJF,CAORvE,MAAM,CAAE,KAPA,CAQRC,QAAQ,CAAE,CARF,CASRC,GAAG,CAAE,CACDqE,OAAO,GADN,CATG,CAYRpE,MAAM,CAAE,CAZA,CAaRqE,UAAU,CAAE,OAbJ,CAcRC,UAAU,GAdF,CAeRpE,IAAI,CAAE,QAfE,CAgBRqE,IAAI,CAAEf,CAAG,CAACzF,EAhBF,CAiBRwB,EAAE,CAAEiE,CAAG,CAACzF,EAjBA,CAkBRyB,CAAC,CAAEgE,CAAG,CAAC/D,WAlBC,CAmBRU,WAAW,CAAE,GAnBL,CAAZ,CAqBA+D,CAAM,CAAC/F,IAAP,CAAYgG,CAAZ,CACH,CAvBD,EAFmC,GA0B/B/D,CAAAA,CAAM,CAAG,CACTK,KAAK,CAAE,kBADE,CAETJ,KAAK,CAAE,CACHC,QAAQ,GADL,CAFE,CAKTC,UAAU,CAAE,SALH,CA1BsB,CAiC/BiE,CAAU,CAAGC,WAAW,CAAC,UAAW,CACpC,GAAInC,CAAC,CAAC,yBAAD,CAAD,CAA6BxD,MAAjC,CAAyC,CACrC4F,aAAa,CAACF,CAAD,CAAb,CAC2B,GAAd,CAAA7G,CAAI,CAACmB,MAFmB,CAKrCkC,MAAM,CAACC,MAAP,CAAcC,OAAd,CAAsBoB,CAAC,CAAC,aAAD,CAAD,CAAiB,CAAjB,EAAoBvE,EAA1C,CAA8CmG,CAA9C,CAAsD9D,CAAtD,EACAkC,CAAC,CAAC,cAAD,CAAD,CAAkB,CAAlB,EAAqBqC,MAArB,EACH,CACJ,CAT2B,CASzB,GATyB,CAU/B,C","sourcesContent":["import {exception as displayException} from 'core/notification';\nimport Templates from 'core/templates';\nimport ModalFactory from 'core/modal_factory';\nimport Passmodal from 'scormreport_heatmap/modal_passgrade';\n\n\nconst group_by_scene = (vals) => {\n    let groups = {};\n\n    vals.forEach((questiondata) => {\n        let id = questiondata.id;\n        try {\n            let key = id.split('_')[0];\n            if (!(key in groups)) {\n                groups[key] = {'data': [], 'id': key};\n            }\n            groups[key].data.push(questiondata);\n        } catch (e) {\n            let key = 'default';\n            if (!(key in groups)) {\n                groups[key] = {'data': []};\n            }\n            groups[key].data.push(questiondata);\n        }\n    });\n    // Shows wrong ident, even tough ident is correct.\n    // @codingStandardsIgnoreStart\n    for (let key in groups) {\n        let best = 0;\n        let worst = 1;\n        let sum = 0;\n        let answersum = 0;\n        for (let question of groups[key].data) {\n            let percentage = question.correct / question.total;\n            if (percentage > best) {\n                best = percentage;\n            }\n            if (percentage < worst) {\n                worst = percentage;\n            }\n            answersum += question.total;\n            sum += percentage;\n        }\n        let average = sum / groups[key].data.length;\n        groups[key].statistics = {\n            answers: answersum,\n            average: average\n        };\n    }\n    // @codingStandardsIgnoreEnd\n    return groups;\n};\n\nconst add_single_question_plotly = (questiondata, appendidentifier) => {\n    let questiontext = '';\n    if ('description' in questiondata) {\n        questiontext = questiondata.description.trim() === '' ? questiondata.id : questiondata.description;\n    } else {\n        questiontext = questiondata.id;\n    }\n    let singletrace = {\n        y0: \"   \",\n        x: questiondata.percentages,\n\n        span: [0, 1],\n        spanmode: \"manual\",\n        meanline: {\n            \"visible\": true\n        },\n        points: 'all',\n        pointpos: 0,\n        box: {\n            'visible': true\n        },\n        jitter: 0,\n        scalemode: \"count\",\n        type: \"violin\",\n        orientation: \"h\"\n    };\n    let layout = {\n        yaxis: {\n            zeroline: false,\n        },\n        violinmode: \"overlay\",\n    };\n    let context = {'id': questiondata.id, title: questiontext, answers: questiondata.total};\n    Templates.renderForPromise('scormreport_heatmap/plotlysection', context).then(({html, js}) => {\n        Templates.appendNodeContents(appendidentifier, html, js);\n        window.Plotly.newPlot('scormreport_heatmap_section_' + questiondata.id, [singletrace], layout);\n        return true;\n    }).catch(ex => displayException(ex));\n};\n\nconst add_single_question_boolean = (questiondata, appendidentifier) => {\n    let questiontext = \"\";\n    if ('description' in questiondata) {\n        questiontext = questiondata.description.trim() === '' ? questiondata.id : questiondata.description;\n    } else {\n        questiontext = questiondata.id;\n    }\n\n    let correct = questiondata.correct;\n    let total = questiondata.total;\n    let percentage = correct * 100 / total;\n    let displaypercentage = Math.max(Math.min(100, Math.round(percentage)), 0);\n    let context = {\n        'id': questiondata.id,\n        'title': questiontext,\n        'answers': questiondata.total,\n        'percentage': displaypercentage,\n        'correct': correct,\n        'total': total\n    };\n    Templates.renderForPromise('scormreport_heatmap/plotlysection', context).then(\n        ({html, js}) => {\n            Templates.appendNodeContents(appendidentifier, html, js);\n            return true;\n    }).catch(ex => displayException(ex));\n};\n\nconst add_question = (questiondata, idprefix) => {\n    if (questiondata.displaytype === \"spectrum\" && questiondata.percentages.length > 0) {\n        let previous = questiondata.percentages[0];\n        var single_yesno_val = previous === 1 || previous === 0;\n        if (single_yesno_val) {\n            for (let percentage of questiondata.percentages) {\n                if (previous !== percentage) {\n                    single_yesno_val = false;\n                    break;\n                }\n            }\n        }\n    }\n    if (questiondata.displaytype === \"spectrum\" && !single_yesno_val) {\n        add_single_question_plotly(questiondata, `#${idprefix}_hiddencontent`);\n    } else {\n        add_single_question_boolean(questiondata, `#${idprefix}_hiddencontent`);\n    }\n};\n\nconst draw_passingquota_for_threshold = (threshold, userscores) => {\n    let passing = 0;\n    for (let score of userscores) {\n        if (score >= threshold) {\n            passing++;\n        }\n    }\n    let percentage = passing * 100 / userscores.length;\n    percentage = Math.max(0, Math.min(Math.round(percentage), 100));\n    let percentagecircle = $('#scormreport_heatmap_passingcontainer > .c100');\n    percentagecircle.removeClass((index, classname) => {\n        return (classname.match('p[0-9]{1,3}'));\n    });\n    percentagecircle.addClass(`p${percentage}`);\n    let circletext = $('#scormreport_heatmap_passingcontainer > .c100 > .percentagecircledefaulttext');\n    // @codingStandardsIgnoreStart\n    circletext.text(`${percentage}%`); //eslint-disable-line\n    // @codingStandardsIgnoreEnd\n};\n\nconst init_projected_passings = (userscores) => {\n    $('#scormreport_heatmap_settings').click(() => {\n        ModalFactory.create({\n            'type': Passmodal.TYPE,\n        }).then((modal) => {\n            modal.savepressedcallback = () => {\n                let passtreshold = parseFloat($('#inputpercentage').val());\n                if (isNaN(passtreshold)) {\n                    return;\n                }\n                draw_passingquota_for_threshold(passtreshold, userscores);\n                modal.hide();\n            };\n            modal.show();\n            return true;\n        }).catch(ex => displayException(ex));\n    });\n    draw_passingquota_for_threshold(50, userscores);\n};\n\nexport const init = (vals, userscores) => {\n    init_projected_passings(userscores);\n    let sections = group_by_scene(vals);\n    for (let section in sections) {\n        let sectiondata = sections[section];\n        let idprefix = `scormreport_heatmap_${section}`;\n        let context = {\n            'id_prefix': idprefix,\n            'title': section,\n            'answers': sectiondata.statistics.answers,\n            'average': (sectiondata.statistics.average * 100).toFixed(2),\n        };\n        Templates.renderForPromise('scormreport_heatmap/collapsible_topic', context)\n            .then(({html, js}) => {\n                Templates.appendNodeContents('#scormreport_heatmap_container', html, js);\n                for (let questiondata of sectiondata.data) {\n                    add_question(questiondata, idprefix);\n                }\n                return true;\n            })\n            .catch(ex => displayException(ex));\n\n    }\n};\n\nexport const oneinallchart = (vals) => {\n    let traces = [];\n    vals.forEach(function (val) {\n        let trace = {\n            text: val.id,\n            span: [0, 1],\n            spanmode: 'manual',\n            meanline: {\n                visible: true,\n            },\n            points: 'all',\n            pointpos: 0,\n            box: {\n                visible: true,\n            },\n            jitter: 0,\n            scalemmode: 'count',\n            showlegend: true,\n            type: 'violin',\n            name: val.id,\n            y0: val.id,\n            x: val.percentages,\n            orientation: 'h'\n        };\n        traces.push(trace);\n    });\n    var layout = {\n        title: \"Auswertung SCORM\",\n        yaxis: {\n            zeroline: false,\n        },\n        violinmode: \"overlay\",\n    };\n    var checkExist = setInterval(function() {\n        if ($('.chartjs-render-monitor').length) {\n            clearInterval(checkExist);\n            let height = vals.length * 200;\n            // $('.chart-area')[0].setAttribute(\"style\",`height:${height}px`);\n            // $('.chart-area')[0].style.height = `${height}px`;\n            window.Plotly.newPlot($('.chart-area')[0].id, traces, layout);\n            $('.chart-image')[0].remove();\n        }\n    }, 100);\n};\n\n/*\nvar data = [{\n        type: 'violin',\n        x: labels,\n        y: values,\n        span: [0, 1],\n        spanmode: 'manual',\n        points: 'none',\n        legendgroup: 'Yes',\n        scalegroup: 'Yes',\n        boxpoints: true,\n        line: {\n            color: 'green',\n        },\n        meanline: {\n            visible: true\n        },\n        transforms: [{\n            type: 'groupby',\n            groups: labels,\n        }],\n        violinmode: 'overlay'\n    }];\n */"],"file":"report_view.min.js"}