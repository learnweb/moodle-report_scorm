{"version":3,"sources":["../src/report_view.js"],"names":["group_by_scene","scormdata","scochartdata","scoid","scodata","questions","scotitle","title","groups","Object","values","forEach","questiondata","id","scenename","split","data","push","e","key","best","worst","sum","answersum","question","percentage","correct_answers","total_answers","average","length","statistics","answers","add_single_question_unscored_default","appendidentifier","questiontext","description","trim","context","id_prefix","identlevel","Templates","renderForPromise","then","html","js","appendNodeContents","learner_responses","catch","ex","add_single_question_plotly_unscored_numeric","countscores","scorearray","score","parseFloat","scorelevels","keys","scoremax","Math","max","scoremin","min","x","y","i","type","window","Plotly","newPlot","add_single_question_plotly","singletrace","y0","percentages","span","spanmode","meanline","points","pointpos","box","jitter","scalemode","orientation","layout","yaxis","zeroline","violinmode","add_single_question_boolean","correct","total","displaypercentage","round","add_question","idprefix","onlyboolvals","displaytype","console","log","init","sections","section","sectiondata","toFixed"],"mappings":"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","sourcesContent":["import {exception as displayException} from 'core/notification';\nimport Templates from 'core/templates';\nimport $ from 'jquery';\n\n// A popular editor names questions SceneX_SlideY_QUESTIONTYPE.\n// Another editor names the questions like SlideX_id.\n// Notably the first will only use one question per slide while the second uses multiple.\n// Importantly, both prepend the quesitonname with a \"group\" name\n// This function groups questions based on their scene or slide.\nconst group_by_scene = (scormdata) => {\n    let scochartdata = {};\n    for (let scoid in scormdata) {\n        scochartdata[scoid] = {};\n        let scodata = scormdata[scoid].questions;\n        let scotitle = scormdata[scoid].title;\n        let groups = {};\n\n        // This editor groups sets of questions in scenes, so first we sort the questions into their scenes.\n        Object.values(scodata).forEach((questiondata) => {\n            let id = questiondata.id;\n            try {\n                let scenename = id.split('_')[0];\n                if (!(scenename in groups)) {\n                    groups[scenename] = {'data': [], 'id': scenename};\n                }\n                groups[scenename].data.push(questiondata);\n            } catch (e) {\n                // If a question names do not follow the above convention we catch them in a \"default\" scene.\n                let scenename = 'default';\n                if (!(scenename in groups)) {\n                    groups[scenename] = {'data': [], 'id': 'default'};\n                }\n                groups[scenename].data.push(questiondata);\n            }\n        });\n        // Shows wrong ident, even tough ident is correct.\n        // @codingStandardsIgnoreStart\n\n        // Now we build some statistics for those groups.\n        // We find the average perfomance as well as worst and best performing questions.\n        // Best and worst performing questions are currently not used for design choices and therefore not returned.\n        for (let key in groups) {\n            let best = 0;\n            let worst = 1;\n            let sum = 0;\n            let answersum = 0;\n            for (let question of groups[key].data) {\n                let percentage = question.correct_answers / question.total_answers;\n                if (percentage > best) {\n                    best = percentage;\n                }\n                if (percentage < worst) {\n                    worst = percentage;\n                }\n                answersum += question.total_answers;\n                sum += percentage;\n            }\n            let average = sum / groups[key].data.length;\n            groups[key].statistics = {\n                answers: answersum,\n                average: average\n            };\n        }\n        scochartdata[scoid].groups = groups;\n        scochartdata[scoid].title = scotitle;\n    }\n    // @codingStandardsIgnoreEnd\n    return scochartdata;\n};\n\nconst add_single_question_unscored_default = (questiondata, appendidentifier) => {\n    let questiontext = '';\n    // Ideally we would like to display the Question Students answered, however sometimes this is not possible.\n    // In that case showing the ID gives more information than showing a blank space.\n    if ('description' in questiondata) {\n        questiontext = questiondata.description.trim() === '' ? questiondata.id : questiondata.description;\n    } else {\n        questiontext = questiondata.id;\n    }\n    let context = {\n        title: questiontext,\n        id_prefix: `unscored_table_switch_${questiondata.id}`,\n        answers: questiondata.total_answers,\n        identlevel: 1\n    };\n    Templates.renderForPromise('scormreport_heatmap/collapsible_topic', context).then(({html, js}) => {\n        Templates.appendNodeContents(appendidentifier, html, js);\n        let context = {\n            'lines': questiondata.learner_responses,\n            'id': questiondata.id,\n        };\n        Templates.renderForPromise('scormreport_heatmap/unscored_default_table', context).then(({html}) => {\n            // Create new table of all resposes for some reason appendNodeContents does not work here.\n            $(`#unscored_table_switch_${questiondata.id}_hiddencontent`).html(html);\n            return true;\n        }).catch(ex => displayException(ex));\n        return true;\n    }).catch(ex => displayException(ex));\n};\n\n\nconst add_single_question_plotly_unscored_numeric = (questiondata, appendidentifier) => {\n    let questiontext = '';\n    // Ideally we would like to display the Question Students answered, however sometimes this is not possible.\n    // In that case showing the ID gives more information than showing a blank space.\n    if ('description' in questiondata) {\n        questiontext = questiondata.description.trim() === '' ? questiondata.id : questiondata.description;\n    } else {\n        questiontext = questiondata.id;\n    }\n    let countscores = {};\n    for (let scorearray of questiondata.learner_responses) {\n        for (let score of scorearray) {\n            score = parseFloat(score);\n            if (!(score in countscores)) {\n                countscores[score] = 0;\n            }\n            countscores[score] = countscores[score] + 1;\n        }\n    }\n    let scorelevels = Object.keys(countscores);\n    let scoremax = Math.max(...scorelevels);\n    let scoremin = Math.min(...scorelevels);\n    let x = [];\n    let y = [];\n    for (let i = scoremin; i <= scoremax; i++) {\n        x.push(i);\n        y.push(i in scorelevels ? countscores[i] : 0);\n    }\n    let data = [{\n        x: x,\n        y: y,\n        type: 'bar'\n    }];\n    let context = {'id': questiondata.id, title: questiontext, answers: questiondata.total_answers};\n    Templates.renderForPromise('scormreport_heatmap/plotlysection', context).then(({html, js}) => { // Ceate new plotly wrapper.\n        Templates.appendNodeContents(appendidentifier, html, js); // Append it to the current toggleable scene.\n        window.Plotly.newPlot('scormreport_heatmap_section_' + questiondata.id, data); // Add plotly graph.\n        return true;\n    }).catch(ex => displayException(ex));\n};\n\n// This function injects a plotly-plot into the html element with id appendidentifier.\nconst add_single_question_plotly = (questiondata, appendidentifier) => {\n    let questiontext = '';\n    // Ideally we would like to display the Question Students answered, however sometimes this is not possible.\n    // In that case showing the ID gives more information than showing a blank space.\n    if ('description' in questiondata) {\n        questiontext = questiondata.description.trim() === '' ? questiondata.id : questiondata.description;\n    } else {\n        questiontext = questiondata.id;\n    }\n    let singletrace = {\n        y0: \" \", // This is the label for an individual violin plot. Since we only display one per question we dont need a title.\n        x: questiondata.percentages,\n\n        span: [0, 1], // manually crops anything above 100% and below 0%.\n        spanmode: \"manual\",\n        meanline: {\n            \"visible\": true\n        },\n        points: 'all',\n        pointpos: 0,\n        box: {\n            'visible': true\n        },\n        jitter: 0,\n        scalemode: \"count\",\n        type: \"violin\",\n        orientation: \"h\" // makes it horizontal\n    };\n    let layout = {\n        yaxis: {\n            zeroline: false,\n        },\n        violinmode: \"overlay\",\n    };\n    let context = {'id': questiondata.id, title: questiontext, answers: questiondata.total_answers};\n    Templates.renderForPromise('scormreport_heatmap/plotlysection', context).then(({html, js}) => { // Ceate new plotly wrapper.\n        Templates.appendNodeContents(appendidentifier, html, js); // Append it to the current toggleable scene.\n        window.Plotly.newPlot('scormreport_heatmap_section_' + questiondata.id, [singletrace], layout); // Add plotly graph.\n        return true;\n    }).catch(ex => displayException(ex));\n};\n\n// This function adds a circle with the questiondatas percentage to the appendidentifier.\nconst add_single_question_boolean = (questiondata, appendidentifier) => {\n    let questiontext = \"\";\n    if ('description' in questiondata) {\n        questiontext = questiondata.description.trim() === '' ? questiondata.id : questiondata.description;\n    } else {\n        questiontext = questiondata.id;\n    }\n\n    let correct = questiondata.correct_answers;\n    let total = questiondata.total_answers;\n    let percentage = correct * 100 / total;\n    let displaypercentage = Math.max(Math.min(100, Math.round(percentage)), 0);\n    let context = {\n        'id': questiondata.id,\n        'title': questiontext,\n        'answers': questiondata.total_answers,\n        'percentage': displaypercentage,\n        'correct': correct,\n        'total': total\n    };\n    Templates.renderForPromise('scormreport_heatmap/scored_binary_section', context).then(\n        ({html, js}) => {\n            Templates.appendNodeContents(appendidentifier, html, js);\n            return true;\n    }).catch(ex => displayException(ex));\n};\n\n// This function gets passed a question and the idprefix of a collapsible topic where that questions data should be visualized.\n// We differentiate values with binary true/false decisisons and those that lie on a spectrum.\n// If the spectrum includes only true and false values (100% and 0%) we treat it as a true/false decisison.\nconst add_question = (questiondata, idprefix) => {\n    let onlyboolvals = false;\n    if (questiondata.displaytype === \"manual_scored\" && questiondata.percentages.length > 0) {\n        onlyboolvals = true;\n        for (let percentage of questiondata.percentages) {\n            window.console.log(percentage);\n            if (percentage !== 0 && percentage !== 1) {\n                window.console.log(\"onlybool = false\");\n                onlyboolvals = false;\n                break;\n            }\n        }\n    }\n    let appendidentifier = `#${idprefix}_hiddencontent`;\n    if (questiondata.displaytype === \"result_scored\" || onlyboolvals) {\n        add_single_question_boolean(questiondata, appendidentifier);\n    } else if (questiondata.displaytype === \"manual_scored\") {\n        add_single_question_plotly(questiondata, appendidentifier);\n    } else if (questiondata.displaytype === \"numeric_unscored\") {\n        add_single_question_plotly_unscored_numeric(questiondata, appendidentifier);\n    } else if (questiondata.displaytype === \"default_unscored\") {\n        add_single_question_unscored_default(questiondata, appendidentifier);\n    }\n};\n\n\nexport const init = (questiondata) => {\n\n    // Group the questiondata into sections.\n    // This is done in js over php to allow for a future setting that specifies the used editor.\n    let sections = group_by_scene(questiondata);\n\n    // The below if / else sections are very similar.\n    // The first is used when there is only one SCO in the SCORM. This is the case most of the time.\n    // The else part basically wraps the one-SCO version into one additional collapsible sections per sco.\n    if (Object.keys(sections).length === 1) {\n        sections = sections[Object.keys(sections)[0]];\n        // Fetch sections from the sectionobject.\n        for (let section in sections.groups) {\n            // Append a collapsible section with infos about the section of questions.\n            let sectiondata = sections.groups[section];\n            let idprefix = `scormreport_heatmap_${section}`;\n            let context = {\n                'id_prefix': idprefix,\n                'title': section,\n                'answers': sectiondata.statistics.answers,\n                'average': (sectiondata.statistics.average * 100).toFixed(2),\n            };\n            Templates.renderForPromise('scormreport_heatmap/collapsible_topic', context)\n                .then(({html, js}) => {\n                    Templates.appendNodeContents('#scormreport_heatmap_container', html, js);\n                    for (let questiondata of sectiondata.data) {\n                        // Add the questiongraphs/visaulizers to the collapsible section.\n                        add_question(questiondata, idprefix);\n                    }\n                    return true;\n                })\n                .catch(ex => displayException(ex));\n\n        }\n    } else {\n        for (let scoid of Object.keys(sections)) {\n            let scodata = sections[scoid];\n            let context = {\n                'id_prefix': `scormreport_heatmap_scosection${scoid}`,\n                'title': `${scodata.title}`,\n            };\n            Templates.renderForPromise('scormreport_heatmap/collapsible_topic', context)\n                .then(({html, js}) => {\n                    Templates.appendNodeContents('#scormreport_heatmap_container', html, js);\n                    for (let section in scodata.groups) {\n                        let sectiondata = scodata.groups[section];\n                        let idprefix = `scormreport_heatmap_${section}`;\n                        let context = {\n                            'id_prefix': idprefix,\n                            'title': section,\n                            'answers': sectiondata.statistics.answers,\n                            'average': (sectiondata.statistics.average * 100).toFixed(2),\n                        };\n                        Templates.renderForPromise('scormreport_heatmap/collapsible_topic', context)\n                            .then(({html, js}) => {\n                                Templates.appendNodeContents(`#scormreport_heatmap_scosection${scoid}_hiddencontent`, html, js);\n                                for (let questiondata of sectiondata.data) {\n                                    add_question(questiondata, idprefix);\n                                }\n                                return true;\n                            }).catch(ex => displayException(ex));\n\n                    }\n                }).catch(ex => displayException(ex));\n        }\n    }\n};"],"file":"report_view.min.js"}