{"version":3,"sources":["../src/report_view.js"],"names":["group_questions","scormdata","scormchartdata","scoid","scodata","questions","scotitle","title","groups","Object","values","forEach","questiondata","id","groupname","split","data","push","e","key","best","worst","sum","answersum","question","percentage","correct_answers","total_answers","average","length","statistics","answers","add_single_question_unscored_default","appendidentifier","editor","questiontext","get_title_from_questiondata","context","id_prefix","identlevel","Templates","renderForPromise","then","html","js","appendNodeContents","learner_responses","catch","ex","add_single_question_plotly_unscored_numeric","countscores","scorearray","score","parseFloat","scorelevels","keys","scoremax","Math","max","scoremin","min","x","y","i","type","window","Plotly","newPlot","add_single_question_plotly_scored_violin","singletrace","y0","percentages","span","spanmode","meanline","points","pointpos","box","jitter","scalemode","orientation","layout","yaxis","zeroline","xaxis","range","tickformat","violinmode","add_single_question_boolean","correct","total","displaypercentage","round","add_question","idprefix","onlyboolvals","displaytype","predict_editor","sco","description","match","_editorcallbacks","trim","replaceAll","get_title_for_editor","init_editor_choser","predicted_editor","val","change","toLowerCase","text","init","sections","section","sectiondata","toFixed"],"mappings":"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","sourcesContent":["import {exception as displayException} from 'core/notification';\nimport Templates from 'core/templates';\nimport $ from 'jquery';\n\n// Our plugin focusses on the Articulate and ispring editor of SCORM\n// These editors (and others) prepend their questions with a grouping identifier like SceneX or SlideX.\n// This function is grouping the questions by using these identifiers.\n// The grouping of this data is done in js instead of the php part of the plugin, to allow for dynamic editor switches\n// in the future.\nconst group_questions = (scormdata) => {\n    let scormchartdata = {};\n    // Iterate over all sco objects of the SCROM packet.\n    for (let scoid in scormdata) {\n        // Initalize a section for this sco to store data in inside the scormchartdata array.\n        scormchartdata[scoid] = {};\n        let scodata = scormdata[scoid]?.questions || {}; // @codingStandardsIgnoreLine ? syntax is not implemented in cs\n        let scotitle = scormdata[scoid].title;\n        let groups = {};\n\n        // Loop over all Questions in this sco, try to identify their groupname and insert them into that groups data section.\n        // The question object also holds an id field that is equal to its name.\n        Object.values(scodata).forEach((questiondata) => {\n            let id = questiondata.id;\n            try {\n                let groupname = id.split('_')[0];\n                if (!(groupname in groups)) {\n                    groups[groupname] = {'data': [], 'id': groupname};\n                }\n                groups[groupname].data.push(questiondata);\n            } catch (e) {\n                // If a question names do not follow the above convention we catch them in a \"default\" group.\n                let groupname = 'default';\n                if (!(groupname in groups)) {\n                    groups[groupname] = {'data': [], 'id': 'default'};\n                }\n                groups[groupname].data.push(questiondata);\n            }\n        });\n        // Shows wrong ident, even tough ident is correct. possibly because of the nested lambdas.\n        // @codingStandardsIgnoreStart\n\n        // Now we build some statistics for those groups.\n        // We find the average perfomance as well as worst and best performing questions.\n        // Best and worst performing questions are currently not used for design choices and therefore not returned.\n        for (let key in groups) {\n            let best = 0;\n            let worst = 1;\n            let sum = 0;\n            let answersum = 0;\n            for (let question of groups[key].data) {\n                let percentage = question.correct_answers / question.total_answers;\n                if (percentage > best) {\n                    best = percentage;\n                }\n                if (percentage < worst) {\n                    worst = percentage;\n                }\n                answersum += question.total_answers;\n                sum += percentage;\n            }\n            let average = sum / groups[key].data.length;\n            groups[key].statistics = {\n                answers: answersum,\n                average: average\n            };\n        }\n        // Finally we push the gathered data into the scormchartdata object.\n        scormchartdata[scoid].groups = groups;\n        scormchartdata[scoid].title = scotitle;\n    }\n    // @codingStandardsIgnoreEnd\n    return scormchartdata;\n};\n\n// Renders a table that displays answers given by students individually.\nconst add_single_question_unscored_default = (questiondata, appendidentifier, editor) => {\n    let questiontext = get_title_from_questiondata(questiondata, editor);\n    let context = {\n        title: questiontext,\n        id_prefix: `unscored_table_switch_${questiondata.id}`,\n        answers: questiondata?.total_answers || 0, // @codingStandardsIgnoreLine ? syntax is not implemented in cs\n        identlevel: 1\n    };\n    Templates.renderForPromise('scormreport_question/collapsible_topic', context).then(({html, js}) => {\n        Templates.appendNodeContents(appendidentifier, html, js);\n        let context = {\n            'lines': questiondata?.learner_responses || [], // @codingStandardsIgnoreLine ? syntax is not implemented in cs\n            'id': questiondata.id,\n        };\n        Templates.renderForPromise('scormreport_question/unscored_default_table', context).then(({html}) => {\n            // Create new table of all resposes for some reason appendNodeContents does not work here.\n            $(`#unscored_table_switch_${questiondata.id}_hiddencontent`).html(html);\n            return true;\n        }).catch(ex => displayException(ex));\n        return true;\n    }).catch(ex => displayException(ex));\n};\n\n// Renders a bar diagramm to show the distribution of numerical answers to a non-scored question.\nconst add_single_question_plotly_unscored_numeric = (questiondata, appendidentifier, editor) => {\n    let questiontext = get_title_from_questiondata(questiondata, editor);\n    let countscores = {};\n    for (let scorearray of questiondata.learner_responses) {\n        for (let score of scorearray) {\n            score = parseFloat(score);\n            if (!(score in countscores)) {\n                countscores[score] = 0;\n            }\n            countscores[score] = countscores[score] + 1;\n        }\n    }\n    let scorelevels = Object.keys(countscores);\n    let scoremax = Math.max(...scorelevels);\n    let scoremin = Math.min(...scorelevels);\n    let x = [];\n    let y = [];\n    for (let i = scoremin; i <= scoremax; i++) {\n        x.push(i);\n        y.push(i in scorelevels ? countscores[i] : 0);\n    }\n    let data = [{\n        x: x,\n        y: y,\n        type: 'bar'\n    }];\n    // @codingStandardsIgnoreLine ? syntax is not implemented in cs\n    let context = {'id': questiondata.id, title: questiontext, answers: questiondata?.total_answers || 0};\n    Templates.renderForPromise('scormreport_question/plotlysection', context).then(({html, js}) => { // Ceate new plotly wrapper.\n        Templates.appendNodeContents(appendidentifier, html, js); // Append it to the current toggleable scene.\n        window.Plotly.newPlot('scormreport_question_section_' + questiondata.id, data); // Add plotly graph.\n        return true;\n    }).catch(ex => displayException(ex));\n};\n\n// Renders a plotly violin plot for a scored question to represent the distribution of Student scores.\n// Students are scored on a scale from 0 to 100 points to represent the corectness of their answer.\nconst add_single_question_plotly_scored_violin = (questiondata, appendidentifier, editor) => {\n    let questiontext = get_title_from_questiondata(questiondata, editor);\n    let singletrace = {\n        y0: \" \", // This is the label for an individual violin plot. Since we only display one per question we dont need a title.\n        x: questiondata.percentages,\n\n        span: [0, 1], // Manually crops anything above 100% and below 0%.\n        spanmode: \"manual\", // Required for above definition to take effect.\n        meanline: {\n            \"visible\": true\n        },\n        points: 'all',\n        pointpos: 0,\n        box: {\n            'visible': true\n        },\n        jitter: 0,\n        scalemode: \"count\",\n        type: \"violin\",\n        orientation: \"h\" // Makes it horizontal\n    };\n    let layout = {\n        yaxis: {\n            zeroline: false,\n        },\n        xaxis: {\n            range: [0, 1],\n            tickformat: ',.0%' // Telling plotly to format the x-axis as percentage.\n        },\n        violinmode: \"overlay\",\n    };\n    // @codingStandardsIgnoreLine ? syntax is not implemented in cs\n    let context = {'id': questiondata.id, title: questiontext, answers: questiondata?.total_answers || 0};\n    Templates.renderForPromise('scormreport_question/plotlysection', context).then(({html, js}) => { // Ceate new plotly wrapper.\n        Templates.appendNodeContents(appendidentifier, html, js); // Append it to the current toggleable scene.\n        window.Plotly.newPlot('scormreport_question_section_' + questiondata.id, [singletrace], layout); // Add plotly graph.\n        return true;\n    }).catch(ex => displayException(ex));\n};\n\n// Renders a circle for a boolean scored question that was either 100% correct or 100% false for all students.\n// The circle represents the amount of students that got it right vs the total amount.\nconst add_single_question_boolean = (questiondata, appendidentifier, editor) => {\n    let questiontext = get_title_from_questiondata(questiondata, editor);\n\n    let correct = questiondata.correct_answers;\n    let total = questiondata.total_answers;\n    let percentage = correct * 100 / total;\n    let displaypercentage = Math.max(Math.min(100, Math.round(percentage)), 0);\n    let context = {\n        'id': questiondata.id,\n        'title': questiontext,\n        'answers': questiondata.total_answers,\n        'percentage': displaypercentage,\n        'correct': correct,\n        'total': total\n    };\n    Templates.renderForPromise('scormreport_question/scored_binary_section', context).then(\n        ({html, js}) => {\n            Templates.appendNodeContents(appendidentifier, html, js);\n            return true;\n    }).catch(ex => displayException(ex));\n};\n\n// This function gets passed a question and the idprefix of a collapsible topic where that questions data should be visualized.\nconst add_question = (questiondata, idprefix, editor) => {\n    let onlyboolvals = false;\n    if (questiondata.displaytype === \"manual_scored\" && questiondata.percentages.length > 0) {\n        onlyboolvals = true;\n        for (let percentage of questiondata.percentages) {\n            if (percentage !== 0 && percentage !== 1) {\n                onlyboolvals = false;\n                break;\n            }\n        }\n    }\n    // The appendidentifier is the jquery selector used to append the questions visualization to.\n    // In our case we want to append the visualization of the toggleable section of the questions group.\n    let appendidentifier = `#${idprefix}_hiddencontent`;\n    // We differentiate between four types of questions.\n    // Questions that are scored can either be:.\n    if (questiondata.displaytype === \"result_scored\" || onlyboolvals) {\n        // ... result based. This means the question is either answered right or wrong.\n        // As such visualization is based on the percentage of correct students.\n        add_single_question_boolean(questiondata, appendidentifier, editor);\n    } else if (questiondata.displaytype === \"manual_scored\") {\n        // ... manually scored. This means that students answers lie on a spectrum that determines their \"correctness\"\n        // To visualize this, students answers are aggreagted in a violin plot.\n        add_single_question_plotly_scored_violin(questiondata, appendidentifier, editor);\n    } else if (questiondata.displaytype === \"numeric_unscored\") {\n        // Or Questions can be unscored.\n        // If the Question has only numeric answers we visualize their distribution in a Bar chart instead of a violin chart\n        // ...this is possible because these answers usually don't vary a lot and are all integers unlike percentages.\n        add_single_question_plotly_unscored_numeric(questiondata, appendidentifier, editor);\n    } else if (questiondata.displaytype === \"default_unscored\") {\n        // If the question is not scored and not numeric it's most likely a free-text answer.\n        // In that case we just display all the students answers.\n        add_single_question_unscored_default(questiondata, appendidentifier, editor);\n    }\n};\n\n// @codingStandardsIgnoreStart\n/* eslint-disable */\n// coding standards recognize regex as mathematical operands.\n// Also expects whitespace before/after optional chaining operand ? which is semantically incorrect.\n\n// This function trys to predict what editor was used to create the SCROM packet.\nconst predict_editor = (scormdata) => {\n    for (let sco of Object.values(scormdata)) {\n        for (let question of Object.values(sco.questions)) {\n            if (question.description !== \"\") {\n                // The articulate editor typically puts the questions text in the description.\n                return \"articulate\";\n            } else if (question.id.match(/Slide\\d+_Q_[^_]*_(?:\\d*_)?_?((?<!__).*)/)?.length || 0 > 1) {\n                // The ispring editor puts the Questionname in the id of the question and follows a very specific format.\n                return \"ispring\";\n            }\n        }\n    }\n    return \"default\";\n};\n\n// Callback map to get a title for a set editor.\n// The x?.y || z syntax returns x.y if it exists and isn't falsy otherwise it returns z\n// The ?. can be chained in that case none of them may be falsy to return x.y\nconst _editorcallbacks = {\n    'articulate': (questiondata) => questiondata.description !== \"\" ? questiondata.description.trim() : questiondata.id,\n    'ispring': ((questiondata) => questiondata.id.match(/Slide\\d+_Q_[^_]*_(?:\\d*_)?_?((?:(?<!____).)*)/)?.[1]?.replaceAll('_', ' ')\n        || get_title_for_editor['default'](questiondata)),\n    'default': (questiondata) => questiondata.id\n};\n/* eslint-enable */\n// @codingStandardsIgnoreEnd\nconst get_title_from_questiondata = (questiondata, editor = 'default') => {\n    // @codingStandardsIgnoreLine ? syntax is not implemented in cs\n    return _editorcallbacks?.[editor](questiondata) || _editorcallbacks['default'](questiondata);\n};\n\nconst init_editor_choser = (scormdata, predicted_editor) => {\n    // Change the dropdown to have the predicted editor selected.\n    $('#scormreport_question_choose_editor').val(predicted_editor);\n    // Define onchange callback for the editor selection dropdown.\n    $('#scormreport_question_choose_editor').change(() => {\n        let editor = $('#scormreport_question_choose_editor').val().toLowerCase();\n        for (let sco of Object.values(scormdata)) {\n            for (let question of Object.values(sco.questions)) {\n                // Set new title for questionsections (plotly and circle).\n                $(`#scormreport_question_sectionwrapper_${question.id} > div > h2`)\n                    .text(get_title_from_questiondata(question, editor));\n                // @codingStandardsIgnoreStart Coding standards doesn't like = without whitespaces.\n                // Also change the title for tables. (unscored non-numeric questions)\n                $(`label[for=unscored_table_switch_${question.id}_switch]`).text(get_title_from_questiondata(question, editor));\n                // @codingStandardsIgnoreEnd\n            }\n        }\n        return 0;\n    });\n};\n\nexport const init = (questiondata) => {\n\n    // Group the questiondata into sections.\n    // This is done in js over php to allow for a future setting that specifies the used editor.\n    let sections = group_questions(questiondata);\n\n    // Predict what editor we are using.\n    let editor = predict_editor(questiondata);\n\n    // The below if / else sections are very similar.\n    // The first is used when there is only one SCO in the SCORM. This is the case most of the time.\n    // The else part basically wraps the one-SCO version into one additional collapsible section per sco.\n    if (Object.keys(sections).length === 1) {\n        sections = sections[Object.keys(sections)[0]];\n        // Fetch sections from the sectionobject.\n        for (let section in sections.groups) {\n            // Append a collapsible section with statistical information about the students' performance in this section.\n            let sectiondata = sections.groups[section];\n            let idprefix = `scormreport_question_${section}`;\n            let context = {\n                'id_prefix': idprefix,\n                'title': section,\n                'answers': sectiondata.statistics.answers,\n                'average': (sectiondata.statistics.average * 100).toFixed(2),\n            };\n            Templates.renderForPromise('scormreport_question/collapsible_topic', context)\n                .then(({html, js}) => {\n                    Templates.appendNodeContents('#scormreport_question_container', html, js);\n                    for (let questiondata of sectiondata.data) {\n                        // Add the questiongraphs/visaulizers to the collapsible section.\n                        add_question(questiondata, idprefix, editor);\n                    }\n                    return true;\n                })\n                .catch(ex => displayException(ex));\n\n        }\n    } else {\n        for (let scoid of Object.keys(sections)) {\n            let scodata = sections[scoid];\n            let context = {\n                'id_prefix': `scormreport_question_scosection${scoid}`,\n                'title': `${scodata.title}`,\n            };\n            Templates.renderForPromise('scormreport_question/collapsible_topic', context)\n                .then(({html, js}) => {\n                    Templates.appendNodeContents('#scormreport_question_container', html, js);\n                    for (let section in scodata.groups) {\n                        let sectiondata = scodata.groups[section];\n                        let idprefix = `scormreport_question_${section}`;\n                        let context = {\n                            'id_prefix': idprefix,\n                            'title': section,\n                            'answers': sectiondata.statistics.answers,\n                            'average': (sectiondata.statistics.average * 100).toFixed(2),\n                        };\n                        Templates.renderForPromise('scormreport_question/collapsible_topic', context)\n                            .then(({html, js}) => {\n                                Templates.appendNodeContents(`#scormreport_question_scosection${scoid}_hiddencontent`, html, js);\n                                for (let questiondata of sectiondata.data) {\n                                    add_question(questiondata, idprefix, editor);\n                                }\n                                return true;\n                            }).catch(ex => displayException(ex));\n\n                    }\n                }).catch(ex => displayException(ex));\n        }\n    }\n    init_editor_choser(questiondata, editor);\n};"],"file":"report_view.min.js"}